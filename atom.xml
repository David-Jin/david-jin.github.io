<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Wheegoo 的空间站</title>
    <subtitle type="html">一个记录我的想法的地方</subtitle>
    <updated>2021-12-01T12:06:27&#43;08:00</updated>
    <id>http://www.wheegoo.com/</id>
    <link rel="alternate" type="text/html" href="http://www.wheegoo.com/" />
    <link rel="self" type="application/atom&#43;xml" href="http://www.wheegoo.com/atom.xml" />
    <author>
            <name>JinWei</name>
            <uri>http://www.wheegoo.com/</uri>
            
                <email>wheegoo@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.89.4">Hugo</generator>
        <entry>
            <title type="text">面向对象的设计模式（一）</title>
            <link rel="alternate" type="text/html" href="http://www.wheegoo.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80/" />
            <id>http://www.wheegoo.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80/</id>
            <updated>2021-11-29T20:30:50&#43;08:00</updated>
            <published>2021-11-29T20:30:50&#43;08:00</published>
            <author>
                    <name>JinWei</name>
                    <uri>https://www.wheegoo.com/</uri>
                    <email>wheegoo@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">软件设计的好坏评判标准之一是复用性。 变化与稳定 实际开发中最大的困难就是需求的多……
    
    </summary>
            
                <content type="html">&lt;p&gt;&lt;img src=&#34;http://www.wheegoo.com/image/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%AD%E6%96%87%E7%89%88%E5%B0%81%E9%9D%A2.jpg&#34; alt=&#34;设计模式中文版封面.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;软件设计的好坏评判标准之一是&lt;strong&gt;复用性&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;变化与稳定&#34;&gt;变化与稳定&lt;/h4&gt;
&lt;p&gt;实际开发中最大的困难就是需求的多变，而变化是软件复用的天敌。面向对象的设计最大的优势是“抵御变化”，注意不是“消灭变化”，&lt;strong&gt;而是把变化像小兔子一样锁在笼子里限制起来。&lt;/strong&gt; 设计模式是软件设计中常见问题的典型解决方案。它们就像能根据需求进行调整的预制蓝图，可用于解决代码中反复出现的设计问题。设计模式与方法或库的使用方式不同，你很难直接在自己的程序中套用某个设计模式。 模式并不是一段特定的代码，而是解决特定问题的一般性理念。 你可以根据模式来实现符合自己程序实际所需的解决方案，所以最佳的实践设计模式的方法是重构到模式（Refactory to Patterns）。当然如果你非常熟悉各种模式的应用场景，也可以一上来就按照适当的设计模式去开发。&lt;/p&gt;
&lt;p&gt;1994年，GoF在他们的书中总结了23种设计模式，此后人们又陆续发现了几十种面向对象的设计模式，“模式方法” 开始在其他程序开发领域中流行起来。 如今，在面向对象设计领域之外，人们也提出了许多其它的模式。设计模式是针对软件设计中常见问题的工具箱，其中的工具就是各种经过实践验证的解决方案。无疑这些设计模式提高了在团队中的沟通效率，我们只要说在这种情况下，你使用工厂模式就可以了，不需要过多的解释。 但是模式不是金科玉律，千万不要为了用模式而去套模式。在实际项目中应该实事求是的对项目进行调整。况且，模式也是会过时。以前广泛使用的模式可能在新一代的语言中内化为语言的设计理念。用设计模式的时候最重要的是分清工程里哪些是变化的，哪些是不变的。把变化的那部分用设计模式的方案来改造一下。试想两个极端：假如我们的工程里面所有模块都是变化的，那用什么设计模式都救不了你。再譬如，我们的工程里所有模块都是稳定的，那你也没有必要去用设计模式了，直接写代码就完事了。因此，分清变与不变最重要，设计模式主要着力点就是那些变化的地方。&lt;/p&gt;
&lt;h4 id=&#34;八大设计原则&#34;&gt;八大设计原则&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;比模式更重要的是设计原则，下面介绍一下八大原则：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;依赖倒置原则（DIP）
&lt;ul&gt;
&lt;li&gt;高层模块（稳定）不应该依赖低层模块（变化），二者都应该依赖抽象（稳定）。&lt;/li&gt;
&lt;li&gt;抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开放封闭原则（OCP）
&lt;ul&gt;
&lt;li&gt;对扩展开放，对更改封闭。&lt;/li&gt;
&lt;li&gt;类模块应该是可扩展的，但是不可修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单一职责原则（SRP）
&lt;ul&gt;
&lt;li&gt;一个类应该仅有一个引起它变化的原因。&lt;/li&gt;
&lt;li&gt;变化的方向隐含着类的责任。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;里氏替换原则（LSP）
&lt;ul&gt;
&lt;li&gt;子类必须能够替换它们的基类(IS-A)。&lt;/li&gt;
&lt;li&gt;继承表达类型抽象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口隔离原则（ISP）
&lt;ul&gt;
&lt;li&gt;不应该强迫客户程序依赖它们不用的方法。&lt;/li&gt;
&lt;li&gt;接口应该小而完备。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优先使用对象组合，而不是类继承
&lt;ul&gt;
&lt;li&gt;类继承通常为“白箱复用”，对象组合通常为“黑箱复用”。&lt;/li&gt;
&lt;li&gt;继承在某种程度上破坏了封装性，子类父类耦合度高，而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;封装变化点
&lt;ul&gt;
&lt;li&gt;使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;针对接口编程，而不是针对实现编程
&lt;ul&gt;
&lt;li&gt;不将变量类型声明为某个特定的具体类，而是声明为某个接口。&lt;/li&gt;
&lt;li&gt;客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。&lt;/li&gt;
&lt;li&gt;减少系统中各部分的依赖关系，从而实现“高内聚、松耦合”的类型设计方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;最重要的事情&#34;&gt;最重要的事情&lt;/h4&gt;
&lt;p&gt;你可以忘记所有的设计模式，但是&lt;strong&gt;设计原则&lt;/strong&gt;必须牢记于心。 所有的模式都是对着这八条原则，在不同的场景下推演出来的。
后面几个章节将介绍一下 C 语言开发中常用的设计模式，注意不是 C++ 语言。C 语言同样可以做到面向对象设计。只不过需要开发者自己做一些基础设施。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://www.wheegoo.com/categories/%E8%AE%BE%E8%AE%A1/" term="设计" label="设计" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://www.wheegoo.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">关于金钱观</title>
            <link rel="alternate" type="text/html" href="http://www.wheegoo.com/post/%E5%85%B3%E4%BA%8E%E9%87%91%E9%92%B1%E8%A7%82/" />
            <id>http://www.wheegoo.com/post/%E5%85%B3%E4%BA%8E%E9%87%91%E9%92%B1%E8%A7%82/</id>
            <updated>2020-07-05T20:39:04&#43;08:00</updated>
            <published>2020-07-05T20:39:04&#43;08:00</published>
            <author>
                    <name>JinWei</name>
                    <uri>https://www.wheegoo.com/</uri>
                    <email>wheegoo@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">把吴军老师《见识》这本书中关于金钱观的金句摘录如下，温故知新： 钱是上帝存在你那……
    
    </summary>
            
                <content type="html">&lt;p&gt;&lt;img src=&#34;http://www.wheegoo.com/image/money/money.jpg&#34; alt=&#34;money.jpg&#34;&gt;
把吴军老师《见识》这本书中关于金钱观的金句摘录如下，温故知新：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;钱是上帝存在你那里的，不是给你的，回头你要还给他的。&lt;/li&gt;
&lt;li&gt;钱只有花出去才是你的。&lt;/li&gt;
&lt;li&gt;钱和任何东西，都是为了让你的生活过的更加好，而不是给你带来麻烦的。&lt;/li&gt;
&lt;li&gt;钱是靠挣出来的，而不是靠省出来的，而挣钱的效率取决于一个人的气度。&lt;/li&gt;
&lt;li&gt;钱是花不完的，但是可以迅速投（投资，投机）光。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;吴军老师对于金钱观中强调&lt;strong&gt;风险意识&lt;/strong&gt;确实很令人印象深刻的。由于一两次的投资成功，忘记了风险。从长期来看，一定是投资失败。&lt;em&gt;&lt;strong&gt;只要有一次失利，可能输光前面所有的盈利。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://www.wheegoo.com/categories/%E8%AF%BB%E5%90%8E%E6%84%9F/" term="读后感" label="读后感" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://www.wheegoo.com/tags/%E8%AE%A4%E7%9F%A5/" term="认知" label="认知" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">关于伪工作者</title>
            <link rel="alternate" type="text/html" href="http://www.wheegoo.com/post/%E5%85%B3%E4%BA%8E%E4%BC%AA%E5%B7%A5%E4%BD%9C%E8%80%85/" />
            <id>http://www.wheegoo.com/post/%E5%85%B3%E4%BA%8E%E4%BC%AA%E5%B7%A5%E4%BD%9C%E8%80%85/</id>
            <updated>2020-06-29T22:54:31&#43;08:00</updated>
            <published>2020-06-29T22:54:31&#43;08:00</published>
            <author>
                    <name>JinWei</name>
                    <uri>https://www.wheegoo.com/</uri>
                    <email>wheegoo@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一封公司研发的内部邮件： 当前，公司处于快速发展的阶段，很多研发人员手上在做的事……
    
    </summary>
            
                <content type="html">&lt;p&gt;一封公司研发的内部邮件：&lt;/p&gt;
&lt;p&gt;当前，公司处于快速发展的阶段，很多研发人员手上在做的事情很多，但是却成果不多。&lt;/p&gt;
&lt;p&gt;第一，我想和大家聊聊关于“伪工作者的问题”和方法论的问题。在我们这个快速发展的IT领域，很多人都面临的问题“每天的事情很多，总也做不完”。由于我们行业的属性：迭代快速，问题和需求总是不断的产生，工作中很容易失去方向感。因此善于找到最重要的工作，并优先完成它们，这成为一个很重要的工作技能。在美国硅谷的公司里面，每天完成上述的事务性工作就被叫做pseudo worker，直译就叫伪工作者。这些人每天看上去好像也很忙，做的事情也可能是公司里面存在的，但是没有产生效果。我们公司里面如果这样的研发人员多了，公司在竞争中一定会处于下风。&lt;/p&gt;
&lt;p&gt;硅谷的公司评价员工不在他看上去有多忙，写了多少行代码，而是看他工作产生了多大的效果。否则，再忙再累都会被淘汰。 我们各级的管理者首先要站到“做什么样的事情能让公司最大获益”的高度上去，这样才能在纷繁复杂的工作中找到那些对公司帮助最大的事情去做，而不是简单的应付老板布置的任务，然后交差。每位一线研发人员要明白积极工作（而不是消极完成任务），受益最大的首先是自己。反之，由于各种原因而消极的工作，慢慢的就会不自觉的就会沦成伪工作者。表象上看，他也任劳任怨的完成任务，但是重要且有难度有影响力的工作从来都不会碰。老板问起来的时候，他会说很认真的在工作，工作量也很饱满。至于为什么重要的事情没有做，他会说时间不够。久而久之，他实际上是自己坑自己。因为随着公司的发展，这一类的人一定会被边缘化，会淘汰。&lt;/p&gt;
&lt;p&gt;那事务性的工作怎么办呢？是不是不要做呢？当然不是。而是自己要来理清思路，平庸的工程师一定是消极应对，但是优秀的工程师会从更高的视角去想如何把事务性工作自动化或者一劳永逸。当你焦虑的时候，不妨停下来想一想，站在对公司业务帮助最大的角度把事情理一下。先把效果最大的事情完成。&lt;/p&gt;
&lt;p&gt;第二，我想讲讲奋斗的问题，习总书记说“幸福是奋斗出来的”。那什么是“奋斗”？ 华为把奋斗定义为：“为客户创造价值，以及为创造价值而做的准备工作都叫做奋斗，除此之外，再苦再累都不叫奋斗”。 我想我们公司的价值观和华为定义的是基本一致的。 那加班的目的是什么？ 加班是为了把事情做好，让自己的工作能产生“效果”，帮助公司获得最大的收益。 如果加班是为了熬时间，白天磨蹭做无关之事，晚上来起忙头，给领导看（事实上，领导很忙，没空看），那这样的加班毫无意义。 工作必须要产生“效果”。 公司评价研发人员的唯一标准是他创造了多少价值，有多少起到效果的成果物，为功劳买单，苦劳和辛劳都没用。所以去年年初我们试行的OKR的目标管理方法，要继续坚持。研发人员要走走心，为自己设立目标，能力欠缺时，管理者应该帮助他理清目标。所有的努力都是为了达到这个目标。这样才能和公司共同成长。&lt;/p&gt;
&lt;p&gt;以下列举IT领域里面的为工作者的特点，大家自己对照一下。如果落入其中，就要警惕了！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能给公司带来较大收益又不能给用户带来改进和“升级”的工作都是伪工作；&lt;/li&gt;
&lt;li&gt;坚持用旧方法而非效率更高的新方法；&lt;/li&gt;
&lt;li&gt;事前不思考，事中乱试错；&lt;/li&gt;
&lt;li&gt;做产品不讲究质量，测试后BUG多，上线后问题多，总花时间在找漏洞和补丁上。&lt;/li&gt;
&lt;li&gt;不注重用有限的资源解决95%的问题，而是把大部分精力用于纠结不重要的5%的问题；&lt;/li&gt;
&lt;li&gt;每次开会评审找一堆跟此不必要的人旁听，或总参加一些不必要的会议。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后，希望各位在公司高速向上发展的过程中，能跟上发展的脚步，方法和态度都同等重要，共同奋斗，共同成长！&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://www.wheegoo.com/categories/%E8%AF%BB%E5%90%8E%E6%84%9F/" term="读后感" label="读后感" />
                            
                        
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">开箱即用</title>
            <link rel="alternate" type="text/html" href="http://www.wheegoo.com/post/%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8/" />
            <id>http://www.wheegoo.com/post/%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8/</id>
            <updated>2020-06-25T19:49:33&#43;08:00</updated>
            <published>2020-06-25T19:49:33&#43;08:00</published>
            <author>
                    <name>JinWei</name>
                    <uri>https://www.wheegoo.com/</uri>
                    <email>wheegoo@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">我有些开箱即用的感悟想记录下来，分两个方面来讨论： 产品的开箱即用 技术的开箱即用……
    
    </summary>
            
                <content type="html">&lt;figure&gt;&lt;img src=&#34;http://www.wheegoo.com/image/out-of-the-box/ootb.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;我有些开箱即用的感悟想记录下来，分两个方面来讨论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;产品的开箱即用&lt;/li&gt;
&lt;li&gt;技术的开箱即用&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;产品开箱即用&#34;&gt;产品开箱即用&lt;/h5&gt;
&lt;p&gt;在书上看好很多人都讲，不要给用户太多的选择，其实用户也不知道想要什么，所以只要产品经理定义好产品就好了。这个话只能说对了一半。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有选择&lt;/strong&gt;是开箱即用在产品上的一种体现，我认为的开箱即用其实本质上是为了&lt;strong&gt;降低用户的心智负担&lt;/strong&gt;。在产品范畴，&amp;quot;选择&amp;quot;本来就是一个困难的事情，如果一个事情有5个选项，砍掉3项选择，用户的幸福感和满意度立马就会提升。把选择权给用户看似是尊重用户的选择，实质上是对用户的不负责任。为什么这样讲？ 试想本来应该产品设计人员去深度思考的事情，确定产品的规格和参数。现在把这些事情让用户在冗杂的信息中自己去辨别，这不是推卸责任又是什么？但是不是选择越少越好呢？也肯定不是。好的产品设计我觉得应该是洞悉人性的。适度的选择给予自由，多了反而迷茫。&lt;/p&gt;
&lt;p&gt;从另外一个角度讲：体会一个场景，你兴匆匆的买了一个想了好久的产品回家，急忙要打开试用，结果搞半天没有用起来。或者拿到手后，发现要看一大堆说明书，简单的操作并无法让产品工作，那种心情会有多悲催？我们设计产品时一定要有一条路径让用户简单的操作就能使得产品工作起来。等到产品工作起来后，再慢慢接受更加高级功能的折腾，大多数用户都能接受。总结一下，产品在用户选择和用户使用前的准备必须要降低到最小。&lt;/p&gt;
&lt;h5 id=&#34;技术开箱即用&#34;&gt;技术开箱即用&lt;/h5&gt;
&lt;p&gt;技术上的开箱即用就比较好理解了。举个例子更容易理解，如果有个开源项目不能以默认的配置直接跑出效果让我看到，恐怕我是不会再有兴趣去折腾这个项目了。如果出现编译错误那就更加没有耐心去排查问题了。我宁可扔掉此项目重新去选一个工程也不会去折腾一个编译就出错的工程。所以我一般做库工程，总是会把最小可用的配置全部包含。不让用户去自己一个一个折腾。或者提供一个脚本能让用户一次性把所有依赖都全部安装好。技术上同样要给我的用户提供开箱即用的体验。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://www.wheegoo.com/categories/%E5%BF%83%E5%BE%97/" term="心得" label="心得" />
                            
                        
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">关于吴军老师的书</title>
            <link rel="alternate" type="text/html" href="http://www.wheegoo.com/post/%E5%85%B3%E4%BA%8E%E5%90%B4%E5%86%9B%E8%80%81%E5%B8%88%E7%9A%84%E4%B9%A6/" />
            <id>http://www.wheegoo.com/post/%E5%85%B3%E4%BA%8E%E5%90%B4%E5%86%9B%E8%80%81%E5%B8%88%E7%9A%84%E4%B9%A6/</id>
            <updated>2020-06-21T09:51:07&#43;08:00</updated>
            <published>2020-06-21T09:51:07&#43;08:00</published>
            <author>
                    <name>JinWei</name>
                    <uri>https://www.wheegoo.com/</uri>
                    <email>wheegoo@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">我比较喜欢吴军老师的书，最早接触到吴军老师的书是《浪潮之颠》，那时候估计刚刚出……
    
    </summary>
            
                <content type="html">&lt;figure&gt;&lt;img src=&#34;http://www.wheegoo.com/image/WuJunBook/cover.jpeg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;我比较喜欢吴军老师的书，最早接触到吴军老师的书是《浪潮之颠》，那时候估计刚刚出版。我在当当上看到这本书的介绍，毫不犹豫的就买下了，三天功夫一口气看完。 不得不佩服吴军老师行文的功力，阅读感受非常流畅，就像一位讲故事的人面对面的在和你聊天。吴军老师的视野十分宽阔，把整个硅谷的兴衰史娓娓道来。颠覆式创新早在美国50年代就已经开始了，对 IT 从业人员有很大的启发。&lt;/p&gt;
&lt;p&gt;接着又买了他的《硅谷之谜》，书虽然不厚三百页左右。但是书中的几个观点颠覆我之前对管理的认知。例如“工程师等级”理论，工程师划分成五等，每一等之间的差距是一个数量级。重要岗位必须花重金请顶尖高手。这个理念对我后面在招聘软件开发人员上有莫大的帮助，以至于我们团队每个人都传阅了一遍。书中还提到，现在的公司已经从上个世纪的提前规划转变成实时负反馈的系统。这是意识形态上的转换。&lt;/p&gt;
&lt;p&gt;然后又买了《大学之路》和《文明之光》，《大学之路》书有上下册，介绍各个美国大学的思想精神，确实和国内的教学理念相差太大。现在国内条件好起来了，很多方面也可以学习美国学的像一点。但是其中的软实力恐怕不是二十年内能马上学到的。《文明之光》估计花了吴军老师很多时间，整整四册把整个东西方的历史都讲了一遍。我利用中午休息时间断断续续的看。同样一贯的行文非常流畅。&lt;/p&gt;
&lt;p&gt;最近，在网上看到吴军老师出了新书 “认知三部曲”，&lt;strong&gt;《见识》、《态度》、《格局》&lt;/strong&gt;  都买了。这套书确实有营养。以前国外有个人提过一个观点叫做 “刻意练习”，有的人虽然读书无数，但是却不见什么长进，或者长进太慢。 有些人大字不识几个，却能从寥寥信息中获取养分。究其原因，读书读书，书里面写的都是对的，但不是你的。没有反思、没有咀嚼的看书，只是一个人肉翻书机。 我从小就喜欢看书，但是长进不大，上面其实说的就是我的少年时代。 不光是我，大多数人读书不能算做读书，只能算翻书。 回想原因：第一不会选书，小时侯认为能印出来的东西都是好的； 第二不会反思，我读了这本书对我产生什么样的影响？ 常常看完书后觉得很有成就感：“又看完了一本书”。 所以这也是我写博客的另外一个原因，把领悟到的东西记录下来，时常能方便的自己看看。书不在看多少，而在领悟后对自己产生多少影响，如果没有不如不读。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://www.wheegoo.com/categories/%E8%AF%BB%E5%90%8E%E6%84%9F/" term="读后感" label="读后感" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://www.wheegoo.com/tags/%E8%AF%BB%E4%B9%A6/" term="读书" label="读书" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">第一篇</title>
            <link rel="alternate" type="text/html" href="http://www.wheegoo.com/post/first/" />
            <id>http://www.wheegoo.com/post/first/</id>
            <updated>2021-11-24T13:52:51&#43;08:00</updated>
            <published>2020-06-20T16:45:08&#43;08:00</published>
            <author>
                    <name>JinWei</name>
                    <uri>https://www.wheegoo.com/</uri>
                    <email>wheegoo@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">开博第一篇写点什么呢？ 就讲讲我这个域名的来历吧，2006 年的时候，公司里面大多……
    
    </summary>
            
                <content type="html">&lt;figure&gt;&lt;img src=&#34;http://www.wheegoo.com/image/first/pfizer.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;开博第一篇写点什么呢？&lt;/p&gt;
&lt;p&gt;就讲讲我这个域名的来历吧，2006 年的时候，公司里面大多数人都叫我伟哥，其实我一开始听着这个名字很不爽的，怎么就和一种药联系起来了呢？我屡次想打破这个困局，无奈天天被人这样叫，想让大家改口都改不过来，叫着叫着，貌似还挺顺口的。算了，形势比人强，就这样作为了我的绰号。&lt;/p&gt;
&lt;p&gt;那个时候博客还是个稀奇的东西，尤其看到制作精良和独立域名的博客，都会好好收藏且拜读。后来，我就想注册一个和我名字有点关系的域名。好的域名基本都没有希望，那就挑难听的吧，比如伟哥这样的名字。然后我就用 “www.wego.com” 去搜索，当然这么短小精悍的域名轮不到我。 接着 “www.weegoo.com”，同样也被注册了。然后就发挥我造词的功力了。 英语里面 wh 和 w 的发音是一样的。就加一个 h 试试看。“www.wheegoo.com” 果然没有被注册。然后我就把邮箱和域名都一口气注册了。先不管干啥用，占个坑再说。十多年以后总想弄个网站主页之类的东西，刚好就把这个域名给用上了。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
